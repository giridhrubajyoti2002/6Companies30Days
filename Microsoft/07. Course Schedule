// https://leetcode.com/problems/course-schedule/description/


class Solution {
    public boolean canFinish(int numCourses, int[][] prerequisites) {
        int n = numCourses;
        ArrayList<Integer>[] list = new ArrayList[n];
        for(int i=0; i<n; i++){
            list[i] = new ArrayList<>();
        }
        for(int[] arr:prerequisites){
            list[arr[0]].add(arr[1]);
        }
        boolean[] vis = new boolean[n];
        boolean[] stack = new boolean[n];
        for(int i=0; i<n; i++){
            if(!vis[i]){
                if(hasCycle(i, list, vis, stack))
                    return false;
            }
        }
        return true;
    }
    public boolean hasCycle(int num, ArrayList<Integer>[] list, boolean[] vis, boolean[] stack){
        vis[num] = true;
        stack[num] = true;
        for(int i:list[num]){
            if(!vis[i]){
                if(hasCycle(i, list, vis, stack))
                    return true;
            }else if(stack[i])
                return true;
        }
        stack[num] = false;
        return false;
    }
}