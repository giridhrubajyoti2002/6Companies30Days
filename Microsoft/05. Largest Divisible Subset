// https://leetcode.com/problems/largest-divisible-subset/


class Solution {
    public List<Integer> largestDivisibleSubset(int[] nums) {
        Arrays.sort(nums);
        int n = nums.length;
        int[] dp = new int[n];
        Arrays.fill(dp, 1);
        int[] hash = new int[n];
        for(int i=0;i<n;i++)
            hash[i] = i;
        int maxSize = 0;
        int idx = 0;
        for(int i=0; i<n; i++){
            for(int prev=0; prev<i; prev++){
                if(nums[i]%nums[prev]==0 && dp[prev]+1>dp[i]){
                    hash[i] = prev;
                    dp[i] = 1 + dp[prev];
                }
            }
            if(dp[i] > maxSize){
                maxSize = dp[i];
                idx = i;
            }
        }
        List<Integer> list = new ArrayList<>();
        list.add(nums[idx]);
        while(hash[idx] != idx){
            idx = hash[idx];
            list.add(nums[idx]);
        }
        Collections.reverse(list);
        return list;
    }
}