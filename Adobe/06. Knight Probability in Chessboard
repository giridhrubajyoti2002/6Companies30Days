//  https://leetcode.com/problems/knight-probability-in-chessboard/description/


class Solution {
    public double knightProbability(int n, int k, int row, int column) {
        int[][] positions = {{-1,-2},{-2,-1},{-2,1},{-1,2},{1,2},{2,1},{2,-1},{1,-2}};
        double[][][] dp = new double[n][n][k+1];
        for(int i=0; i<n; i++)
            for(int j=0; j<n; j++){
                Arrays.fill(dp[i][j], -1);
                dp[i][j][0] = 1;
            }
        return knightProbabilityUtil(row, column, k, n, positions, dp);
    }
    public double knightProbabilityUtil(int i, int j, int k, int n, int[][] positions, double[][][] dp){
        if(i<0 || j<0 || i>=n || j>=n)
            return 0;
        if(dp[i][j][k]!=-1)
            return dp[i][j][k];
        double ans = 0;
        for(int[] pos:positions){
            ans += 1./8 * knightProbabilityUtil(i+pos[0], j+pos[1], k-1, n, positions, dp);
        }
        return dp[i][j][k] = ans;
    }
}