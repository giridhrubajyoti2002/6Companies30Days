//  https://leetcode.com/problems/invalid-transactions/description/


class Solution {
    public List<String> invalidTransactions(String[] transactions) {
        int n = transactions.length;
        String[][] arr = new String[n][4];
        Map<String,Set<Integer>> name = new HashMap<>();
        Map<String,Set<Integer>> city = new HashMap<>();
        Set<Integer> ans = new HashSet<>();
        for(int i=0; i<n; i++){
            arr[i] = transactions[i].split(",");
            if(!name.containsKey(arr[i][0]))
                name.put(arr[i][0], new HashSet<>());
            name.get(arr[i][0]).add(i);
            if(!city.containsKey(arr[i][3]))
                city.put(arr[i][3], new HashSet<>());
            city.get(arr[i][3]).add(i);
        }
        outer:
        for(int i=0; i<n; i++){
            for(int j:name.get(arr[i][0])){
                if(i!=j && Math.abs(Integer.parseInt(arr[i][1])-Integer.parseInt(arr[j][1]))<=60 && !arr[i][3].equals(arr[j][3])){
                    ans.add(i);
                    ans.add(j);
                }
            }
            if(Integer.parseInt(arr[i][2])>1000)
                ans.add(i);
        }
        List<String> list = new ArrayList<>();
        for(int i:ans){
            list.add(arr[i][0]+","+arr[i][1]+","+arr[i][2]+","+arr[i][3]);
        }
        return list;
    }
}