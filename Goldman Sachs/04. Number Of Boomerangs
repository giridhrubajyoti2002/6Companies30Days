//  https://leetcode.com/problems/number-of-boomerangs/


class Solution {    
    public int numberOfBoomerangs(int[][] points) {
        int n = points.length;
        int ans = 0;
        for(int i=0; i<n; i++){
            Map<Double,Integer> dist = new HashMap<>();
            for(int j=0; j<n; j++){     // for i==j , 0 will be added to ans, from nP2 function
                double d = getDistance(points[i], points[j]);
                dist.put(d, dist.getOrDefault(d,0) + 1);
            }
            for(int x:dist.values()){
                if(x>=2)
                    ans += nP2(x); // x=0,1; value will be 0
            }  
        }
        return ans;
    }
    public double getDistance(int[] a, int[] b){
        return Math.sqrt(Math.pow(a[0]-b[0],2) + Math.pow(a[1]-b[1],2));
    }
    public int nP2(int n){
        return n*(n-1);
    }
}